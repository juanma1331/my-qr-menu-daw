// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Menu {
    id            String        @id() @default(cuid())
    createdAt     DateTime      @default(now())
    qrId        String 
    ownerId       String
    owner         User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    versions      MenuVersion[]
}

model MenuVersion {
    id             Int       @id @default(autoincrement())
    title          String
    subtitle       String?
    isPublic       Boolean   @default(false)
    createdAt      DateTime  @default(now())
    bgImageId     String? 
    menu           Menu      @relation(fields: [menuId], references: [id], onDelete: Cascade)
    menuId         String
    sections       Section[]
}

model Section {
    id            Int         @id @default(autoincrement())
    name          String
    position      Int
    menuVersion   MenuVersion @relation(fields: [menuVersionId], references: [id], onDelete: Cascade)
    menuVersionId Int
    products      Product[]
}

model Product {
    id           Int    @id @default(autoincrement())
    name         String 
    description  String?
    price        Int
    imageId     String 
    section      Section   @relation(fields: [sectionId], references: [id], onDelete: Cascade)
    sectionId    Int
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


enum Role {
    USER
    ADMIN
}


model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    menuCreationLimit Int @default(2)
    accounts      Account[]
    sessions      Session[]
    role         Role @default(USER)
    menus         Menu[]
}


model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
